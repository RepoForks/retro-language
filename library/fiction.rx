( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( interactive fiction interpreter core                                        )
( copyright [c] 2011-2012, Charles Childers                                   )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

needs array'
needs struct'
needs enum'
needs linkedList'

with struct'

chain: fiction'

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( At a fundamental level, everything derives from a single generic "object"   )
( structure. This contains a lot of fields, most of which aren't relevant to  )
( all of the objects. So there's some waste here, but it simplfies things     )
( overall.                                                                    )
(                                                                             )
( The objects have a .type field. We use the enum' library to create a series )
( of enumerated data types. Each object gets tagged with a type, so we can    )
( enumerate things later. And functions can use this to prevent execution on  )
( objects that they do not support.                                           )
(                                                                             )
( When you create an object, you should provide a short name, and a detailed  )
( description.                                                                )
(                                                                             )
( So:                                                                         )
(                                                                             )
(   object foo                                                                )
(   "Foo" nameOf foo                                                          )
(   "This is a small brass key." describes foo                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

1 ^enum'enum| ROOM ITEM |

{ 1 field .description
  1 field .shortDescription
  1 field .type
  1 field .onLook
  1 field .onEntry
  1 field .location
  1 field .visited
  1 field .toNorth
  1 field .toSouth
  1 field .toEast
  1 field .toWest
  1 field .onNorth
  1 field .onSouth
  1 field .onEast
  1 field .onWest
  1 field .postDescription
  1 field .preDescription
  1 field .onRead
} object

: describes ( $"- )
  keepString ' .description ! ;

: nameOf  ( $"- )
  keepString ' .shortDescription ! ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Creation of Rooms                                                           )
(                                                                             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

: room ( "- )
  object ROOM @last @d->xt .type ! ;

: invertDirection ( a$-a )
  [ "north" compare ] [ .toSouth ] whend
  [ "south" compare ] [ .toNorth ] whend
  [ "east"  compare ] [ .toWest  ] whend
  [ "west"  compare ] [ .toEast  ] whend
  drop ;

: is ( a""""- )
  getToken invertDirection getToken drop ' swap ! ;



( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Creation of items                                                           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

^linkedList'new: items

: item ( "- )
  object ITEM @last @d->xt .type !
  @last @d->xt items ^linkedList'b.add ;

: contains ( a"- )
  ' .location ! ;

: has? ( a-af )
  dup .location @ 0 = ;

: displayItem ( a- )
  dup .shortDescription @ swap xt->d d->name "(%s) - %s\n" puts ;

: inventory ( - )
  "\nYou are carrying:\n" puts
  items [ ^linkedList'.value @ has? [ displayItem ] [ drop ] if ] ^types'LIST each@ ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Game Play Loop                                                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

variable at

: invalidDirection ( - )
  "You can not go in that direction.\n" puts ;

: moveNorth ( - )
  @at .onNorth @
  [ @at .onNorth @ do @at .toNorth @ 0; !at ]
  [ @at .toNorth @ 0 <>
    [ @at .toNorth @ !at ]
    [ invalidDirection   ] if ] if ;

: moveSouth ( - )
  @at .onSouth @
  [ @at .onSouth @ do @at .toSouth @ 0; !at ]
  [ @at .toSouth @ 0 <>
    [ @at .toSouth @ !at ]
    [ invalidDirection   ] if ] if ;

: moveEast ( - )
  @at .onEast @
  [ @at .onEast @ do @at .toEast @ 0; !at ]
  [ @at .toEast @ 0 <>
    [ @at .toEast @ !at ]
    [ invalidDirection   ] if ] if ;

: moveWest ( - )
  @at .onWest @
  [ @at .onWest @ do @at .toWest @ 0; !at ]
  [ @at .toWest @ 0 <>
    [ @at .toWest @ !at ]
    [ invalidDirection   ] if ] if ;

: describeCurrentRoom ( - )
  @at .shortDescription @ puts 2cr
  [ @at .preDescription @ 0; do ] do
  @at .visited @
      [ @at .description @ puts 2cr -1 @at .visited ! ] ifFalse
  [ @at .postDescription @ 0; do ] do ;

: play ( - )
  clear
  repeat
  describeCurrentRoom
  "> " puts getToken
  [ [ "n" compare ] [ moveNorth ] whend
    [ "s" compare ] [ moveSouth ] whend
    [ "e" compare ] [ moveEast  ] whend
    [ "w" compare ] [ moveWest  ] whend
    [ "l" compare ] [ @at .description @ puts ] whend
    [ "i" compare ] [ inventory ] whend
    [ "drop" compare ] [ getToken find [ @d->xt .location @at swap ! ] [ drop ] if ] whend
    [ "take" compare ] [ getToken find [ @d->xt .location 0 swap ! ]
                                            [ "\nI don't see that here.\n" puts ] if ] whend
    [ "x" compare ]
      [ getToken find
        [ @d->xt dup .location @ [ @at = ] [ 0 = ] bi or
          [ .description @ puts cr ] [ drop "\nI don't see that here.\n" puts ] if
      ] [ "\nI don't see that here\n" puts ] if ] whend

    [ "read" compare ] [ getToken find
        [ @d->xt dup .location @ [ @at = ] [ 0 = ] bi or
          [ .onRead @ dup [ do ] [ "You can't read this" puts ] if ] [ drop "\nI don't see that here.\n" puts ] if
      ] [ "\nI don't see that here\n" puts ] if ] whend
    [ "quit" compare ] [ "\n\nThanks for playing!\n\n" puts bye ] whend
  ] do
  2cr
  again ;
;chain

without

