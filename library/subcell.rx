
: highWord ( cellAddr -- highwordAddr ) 2 * ;

: lowWord  ( cellAddr -- lowwordAddr  ) 2 * 1 + ;

: w@ ( wordAddr -- val ) 2 /mod  @ swap [ 16 >> ] ifFalse $FFFF and ;
    
: w@+ ( wordAddr -- wordAddr val ) dup 1+ push w@ pop swap ;

: w! ( val wordAddr -- )
   2 /mod dup push swap 
   [ @ $FFFF0000 and + ] 
   [ @ $0000FFFF and swap 16 << + ] 
   if pop ! ;
   
: w!+ dup 1+ push w! pop ;

: highByte ( wordAddr -- highbyteAddr ) 
   2 * ;

: lowByte  ( wordAddr -- lowbyteAddr  ) 
   2 * 1 + ;

: c@ ( byteAddr -- val )
   2 /mod w@ swap [ 8 >> ] ifFalse $FF and ;
   
: c@+ ( byteAddr -- byteAddr val )
  dup 1+ push c@ pop swap ;

: c! ( val byteaddr -- ) 
  2 /mod dup push swap 
  [ w@ $FF00 and + ] 
  [ w@ $00FF and swap 8 << + ] 
  if pop w! ;
  
: c!+ dup 1+ push c! pop ;

variable testVal

: testWord
   $FFFF0001 testVal !
   cr " High: " puts testVal highWord w@ putn
   cr " Low: "  puts testVal lowWord  w@ putn 
   $0000 testVal highWord w! 
   $FFFF testVal lowWord w! 
   cr " High: " puts testVal highWord w@ putn
   cr " Low: "  puts testVal lowWord  w@ putn ; 

: testByte
    $FF01 testVal !
    cr " High: " puts testVal lowWord highByte c@ putn
    cr " Low: "  puts testVal lowWord lowByte  c@ putn
    $00 testVal lowWord highByte c! 
    $FF testVal lowWord lowByte  c! 
    cr " High: " puts testVal lowWord highByte c@ putn
    cr " Low: "  puts testVal lowWord lowByte  c@ putn ; 

