
needs subcell'
with subcell'

chain: dump'

{{

variable A
variable B

: highNibble ( byteAddr -- highNibbleAddr )
    2 * ;
    
: lowNibble ( byteAddr -- lowNibbleAddr )
    2 * 1 + ;
    
: nibble@ ( nibbleAddr -- val )
    2 /mod c@ swap [ 4 >> ] ifFalse $F and ;
    
: visible? ( val -- t | f )
    dup 31 > swap 126 < + -2 = ;
    
: printField ( val -- )
    dup 10 < [ 48 + ] [ 55 + ] if putc ;
    
: printWords ( addr -- )
    highWord highByte highNibble
    8 [  dup nibble@ printField 1+ ] 
    times drop space ;
    
: printChar ( val -- )
    dup visible? [ putc ] [ drop 95 putc ] if ;
    
: printChars ( addr -- )
    highWord highByte
    16 [ dup c@ printChar 1+ ]
    times drop cr ;
    
: dumpLine ( addr -- )
   @A putn space
   4 [ @A printWords A ++ ] times 
   @B printChars @A !B ;
   
---reveal---

: dump ( numLines addr -- )
   cr dup !A !B  [ dumpLine ] times ;
   
}}
   
;chain

with dump'
   
variable myVar
"What's up dude?" myVar !

: testDump
    4 myVar over over @ dump
    dup @ packString
    @ dump ;
